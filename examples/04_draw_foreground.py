#! /usr/bin/python
# -*- coding: utf-8 -*-

# Copyright (C) 2011 ~ 2012 Deepin, Inc.
#               2011 ~ 2012 Wang Yong
# 
# Author:     Wang Yong <lazycat.manatee@gmail.com>
# Maintainer: Wang Yong <lazycat.manatee@gmail.com>
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import xcb
import xcb.xproto as xproto

conn = xcb.connect()

# Get screen size
screen = conn.get_setup().roots[0]
screen_width = screen.width_in_pixels
screen_height = screen.height_in_pixels

# In XCB, window is uint32 id.
# We use function `generate_id` to generate id for new window. 
window = conn.generate_id()

# Create window.
conn.core.CreateWindow(
    screen.root_depth,          # depth same as root
    window,                     # window id generated by function `generate_id`
    screen.root,                # parent window is root window
    10,                         # window x
    10,                         # window y
    screen_width / 2,           # window width
    screen_height / 2,          # window height
    30,                          # border width
    xproto.WindowClass.InputOutput, # window class
    screen.root_visual,             # window visual
    xproto.CW.BackPixel | xproto.CW.EventMask, # event mask
    [screen.white_pixel, xproto.EventMask.ButtonPress | xproto.EventMask.EnterWindow | xproto.EventMask.LeaveWindow | xproto.EventMask.Exposure],
    )

# All window is invisible when it created.
# We need use function MapWindow to draw it on screen.
conn.core.MapWindow(window)

# Create black graphics context for drawing in the foreground.
foreground = conn.generate_id()
conn.core.CreateGC(
    foreground,
    window,
    xproto.GC.Foreground | xproto.GC.GraphicsExposures,
    [screen.black_pixel, 0],
    )

# Flush all X requests to the X server.
conn.flush()            

while True:
    try:
        event = conn.wait_for_event()
    except xcb.ProtocolException, error:
        print "Protocol error %s received!" % error.__class__.__name__
        break
    except:
        break
    
    if isinstance(event, xproto.ExposeEvent):
        # Draw four points
        points = [(10, 10), (10, 20), (20, 10), (20, 20)]
        conn.core.PolyPoint(
            xproto.CoordMode.Origin, window, foreground, 
            len(points),
            points,
            )
        
        # Draw polygonal line.
        lines = [(30, 30), (10, 10), (10, -10), (10, 10)]
        conn.core.PolyLine(
            xproto.CoordMode.Previous, window, foreground, 
            len(lines),
            lines,
            )
        
        # Draw segements.
        segements = [(100, 10, 100, 30), (100, 50, 200, 50)]
        conn.core.PolySegment(
            window, foreground,
            len(segements),
            segements,
            )
        
        # Draw rectangles.
        rectangles = [(200, 20, 10, 10), (250, 20, 50, 50)]
        conn.core.PolyRectangle(
            window, foreground,
            len(rectangles),
            rectangles,
            )
        
        # Draw arcs.
        arcs = [(350, 10, 30, 30, 0, 360 << 6),
                (400, 10, 30, 30, 0, 180 << 6),]
        conn.core.PolyArc(
            window, foreground,
            len(arcs),
            arcs,
            )
        
        # Flush requests.
        conn.flush()
    elif isinstance(event, xproto.ButtonPressEvent):
        print "Click button to exit"
        break
        
    conn.flush()

# We should disconnect connection when don't need it anymore.
conn.disconnect()
